#+BEGIN_HTML
---
layout: post
title: Easily convert Java Objects to/from json
episode: 7
summary: These days, json is ubiquitous. See how easy it is to use the Google Gson Library to convert java objects to json and back. Then, as a more practical use case, I show how I use Gson to read and use json files similar to the concept of Unit Test Fixtures in Rails. 
video: json-using-gson.mp4
---
#+END_HTML

Find a copy of the companion source code for this episode here: 

https://github.com/upgradingdave/javajing/tree/master/json-using-gson

In case you're viewing this in github, please find the Episode here: 

http://javajing.com/2012/07/13/json-using-gson.html

* Simple Example

  - Include gson as a dependency

  #+BEGIN_SRC xml
  <dependency>
     <groupId>com.google.code.gson</groupId>
     <artifactId>gson</artifactId>
     <version>2.2.1</version>
  </dependency>
  #+END_SRC 

  - Find (or create) a simple bean or model
  - Instantiate a Gson object 
  - Use the Gson object's toJson and fromJson methods. That's it!

* Read json files to generate test data using gson

  Ruby on Rails has a concept called "Fixtures". Basically, a fixture
  is a text file containing a representation of test data (in rails,
  they use yml). The test data is loaded into the database before each
  unit test is run, and removed afterwords.

  Gson makes it easy to write a class (which I called JsonFixture)
  that can slurp in a bunch of json from a text file to create a bunch
  of Java Objects.

* Dealing with Dates
  
  I didn't mention this in the episode, but if you need to deal with
  dates, gson provides a nice mechanism for defining your preferred
  date format. Here's a quick example:

  Use a builder to create gson object rather than using the default
  Gson constructor like so: 

  #+BEGIN_SRC java
    String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
    Gson gson = new GsonBuilder().setDateFormat(DATE_FORMAT).create();
  #+END_SRC

  Then, use the same date format inside the json and you should be set.

  #+BEGIN_SRC java
    @Test
    public void date() throws ParseException {

        String dateFormat = "yyyy-MM-dd HH:mm:ss";

        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.setDateFormat(dateFormat);

        Gson gson = gsonBuilder.create();

        String jsonDate = "2012-07-04 10:04:01";

        Date startDate = new SimpleDateFormat(dateFormat).parse(jsonDate);

        //valid json values are surrounded in double quotes
        String expected = "\""+jsonDate+"\"";

        assertEquals(expected, gson.toJson(startDate, Date.class));

        Date endDate = gson.fromJson(expected, Date.class);

        assertEquals(startDate, endDate);
    }
  #+END_SRC

* Generic Type

  - Be careful about type erasure in generic types. If you need to use
    Generics, just remember to pass in the Class type:

  #+BEGIN_SRC java
  Class clazz
  ... later ...
  T thing = gson.fromJson(reader, clazz);
  #+END_SRC

* Links
  
  Google Gson
  http://code.google.com/p/google-gson/

  Json
  http://www.json.org/

  Type Erasure
  http://docs.oracle.com/javase/tutorial/java/generics/erasure.html

  
