#+BEGIN_HTML
---
layout: post
title: Use Apache to proxy Java Web Apps
episode: 6
summary: Testing your java web app over http://localhost:8080 is fine at first, but eventually, you'll want to set it up so that you can access it at http://yourdomain.com. In this episode, I demonstrate how to use Apache to host your java webapp by proxying requests from port 80 back to a java servlet container like jetty or tomcat using the proxy and rewrite modules.
video: apache-proxy.mp4
---
#+END_HTML

Java servlet containers such as weblogic, jetty, tomcat, etc run on
various ports. For example, tomcat listens on port 8080 by default.
It's often convenient to proxy servlets and java apps over
port 80. This is useful for several reasons: 

- End users don't need to remember port numbers to access production
- It's also a good practice from security perspective. Rather than
  opening various ports, you can lock down everything and then allow
  access over port 80 and/or 443.
- Save development time by testing over port 80 so that you can ensure
  the app uses portable urls

Here's a demo of how to use Apache mod_proxy to set this up inside
your development environment. 

* Steps to configure Apache to proxy requests to a Java Servlet Container

- Verify apache proxy and rewrite modules are enabled

  Here's how you can check whether the modules are enabled: 

  #+BEGIN_SRC sh
  # might need to set APACHE_RUN_USER environment variable using this:
  . /etc/apache2/envvars
  
  apache2 -l # list of compiled in modules
  apache2 -M # list of dynamically loaded modules
  
  apache2 -M | grep proxy
  
  apache2 -M | grep rewrite
  #+END_SRC

  In Apache2, use the following commands to enable the modules

   #+BEGIN_SRC sh
a2enmod proxy
a2enmod proxy_http
a2enmod rewrite
   #+END_SRC

- Configure new vhost

  Create app-name.conf file under /etc/apache2/sites-available

  #+BEGIN_SRC sh
<VirtualHost *:80>
    ServerAdmin upgradingdave@gmail.com
    ServerName javajing.com
    DocumentRoot /home/dparoulek/projects/javajing/apache-proxy/simple-webapp/src/main/webapp
    ErrorLog "logs/javajing-error"
    CustomLog "logs/javajing-access_log" common

    <Location />
      Order allow,deny
      Allow from all
    </Location>

    ProxyRequests On
    RewriteEngine On

    RewriteRule ^/$ http://localhost:8080/simple-webapp/ [P]
    RewriteRule ^/(.+)$ http://localhost:8080/simple-webapp/$1 [P]

</VirtualHost>
  #+END_SRC

  Beware of forward slashes!

- enable new vhost

  #+BEGIN_SRC sh
  sudo a2ensite <app-name>.conf
  #+END_SRC

- check configs

  #+BEGIN_SRC sh
  sudo apache2ctl configtest
  #+END_SRC

- Set up subdomain

  I like to add the domain to my local hosts file. This way you can
  trick your browser to thinking the site is hosted locally.

  On 'nix operating systems: Edit `/etc/hosts`. On windows, edit:
  `C:\\WINDOWS\system32\drivers\etc\hosts`. Add an entry like: 

  #+BEGIN_SRC sh
  127.0.0.1    mydomain.com
  #+END_SRC

  Don't forget to remove the entry after you deploy to production ;-)

- restart apache and test on http://mydomain.com

* Links

  XAMMP
  http://www.apachefriends.org/en/xampp.html

  Apache Rewrite Module:
  http://httpd.apache.org/docs/current/mod/mod_rewrite.html
